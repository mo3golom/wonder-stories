<?xml version="1.0"?>
<ruleset name="XoSniffs">
    <description>Внутренние правила для PHP_CodeSniffer</description>

    <rule ref="PSR12">
        <!-- Отключение  -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- Не проверяем на наличие неймспейсов -->
    <exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace"/>
    <exclude-pattern>bootstrap.php</exclude-pattern>
    <exclude-pattern>Kernel.php</exclude-pattern>

    <config name="installed_paths" value="../../slevomat/coding-standard"/>

    <!-- Правила сортировки структуры внутри класса, чтобы трейты не жили в между методами -->
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>

                <!-- Public constants are first but you don't care about the order of protected or private constants -->
                <element value="public constants"/>
                <element value="constants"/>

                <!-- You don't care about the order among the properties. The same can be done with "properties" shortcut -->
                <element value="public properties"/>
                <element value="protected properties"/>
                <element value="private properties"/>
                <element value="public static properties"/>
                <element value="protected static properties"/>
                <element value="private static properties"/>

                <!-- Constructor is first, then all public methods, then protected/private methods and magic methods are last -->
                <element value="constructor"/>
                <element value="all public methods"/>
                <element value="methods"/>
                <element value="magic methods"/>
            </property>
        </properties>
    </rule>

    <!-- Правило сортировки use по алфавиту -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- Правило забытых отладочных принтов -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="eval=>NULL,dd=>NULL,die=>NULL,var_dump=>NULL"/>
        </properties>
    </rule>

    <!-- Правило короткой формы записи массивов (не array(), а []) -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found">
        <type>warning</type>
    </rule>

    <!-- Правило лишних точек с запятой -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>

    <!-- Правило strict_types -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!-- Правило запрещает использование свободных операторов сравнения -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Правило ищет неиспользуемый импорт из других пространств имен -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>

    <!-- Правило обеспечивает размещение конечных скобок для многострочных массивов -->
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>

    <!-- Правило применяет конечные запятые в многострочных массивах и требует короткого синтаксиса массива -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Правило принуждает использовать сокращенную форму синтаксиса списка [...]вместо list(...) -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>

    <!-- Правило ищет бесполезные скобки -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

    <!-- Правило сообщает о пустых комментариях -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

    <!-- Правило запрещает использование @package -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array" value="@package"/>
        </properties>
    </rule>

    <!-- Правило сообщает о бесполезной @var аннотации -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

    <!-- Правило сообщает о вызовах этих функций без параметра или с $strict = false -->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall"/>

    <!-- Правило находит недостижимые блоки перехвата -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Правило проверяет пробелы в объявлениях однострочных массивов -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>

    <!-- Правило проверяет пробелы в объявлениях однострочных массивов -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>

    <!-- Правило проверяет наличие определенного количества пустых строк между методами -->
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
        <properties>
            <property name="minLinesCount" value="1"/>
            <property name="maxLinesCount" value="1"/>
        </properties>
    </rule>

    <!-- Правило проверяет наличие определенного количества пустых строк между методами -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="allowSingleLineYieldStacking" value="1"/>
            <property name="linesCountBefore" value="1"/>
            <property name="linesCountBeforeFirst" value="0"/>
            <property name="linesCountBeforeWhenFirstInCaseOrDefault" value="0"/>
            <property name="linesCountAfter" value="0"/>
            <property name="linesCountAfterLast" value="0"/>
            <property name="linesCountAfterWhenLastInCaseOrDefault" value="0"/>
            <property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0"/>
        </properties>
    </rule>

    <!-- Правило по возможности требует использования короткого тернарного оператора ?: -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <!-- Правило проверяет повторяющиеся пробелы в любом месте -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesInComment" value="1"/> <!-- Добавляем игнор правила в комментариях ради сохранения красивой swagger схемы (иначе будет нечитаемый треш)-->
        </properties>
    </rule>

    <!-- Правило обеспечивает согласованное форматирование возвращаемых подсказок типа -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>
</ruleset>
